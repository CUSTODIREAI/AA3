import unittest\n\nfrom factorial import factorial\n\n\nclass TestFactorial(unittest.TestCase):\n    def test_small_values(self):\n        self.assertEqual(factorial(0), 1)\n        self.assertEqual(factorial(1), 1)\n        self.assertEqual(factorial(5), 120)\n        self.assertEqual(factorial(10), 3628800)\n\n    def test_large_value(self):\n        # 20! = 2432902008176640000\n        self.assertEqual(factorial(20), 2432902008176640000)\n\n    def test_negative_raises_value_error(self):\n        with self.assertRaises(ValueError):\n            factorial(-1)\n\n    def test_non_integral_raises_type_error(self):\n        for bad in (3.14, 5.0, '3', object()):\n            with self.assertRaises(TypeError):\n                factorial(bad)\n\n    def test_bool_rejected(self):\n        with self.assertRaises(TypeError):\n            factorial(True)\n        with self.assertRaises(TypeError):\n            factorial(False)\n\n    def test_integral_like_via_index(self):\n        class IntLike:\n            def __index__(self):\n                return 7\n\n        self.assertEqual(factorial(IntLike()), 5040)\n\n\nif __name__ == '__main__':\n    unittest.main(verbosity=2)\n